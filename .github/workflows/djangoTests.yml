name: Django DRF CI

on: [push, pull_request]

jobs:
  build:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install coverage pytest pytest-django
    
    - name: Run migrations and create test user
      env:
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
        DB_NAME: test_db
        DB_USER: postgres
        DB_PASSWORD: postgres
        DB_HOST: localhost
        DB_PORT: 5432
        DEBUG: "True"
        ALLOWED_HOSTS: "*"
        CLOUD_NAME: ${{ secrets.CLOUD_NAME }}
        API_KEY: ${{ secrets.APL_KEY }}
        API_SECRET: ${{ secrets.API_SECRET }}
      run: |
        python manage.py migrate
        echo "from django.contrib.auth import get_user_model; User = get_user_model(); User.objects.create_user(username='hollow', password='2502', is_staff=True)" | python manage.py shell
    
    - name: Run tests with coverage
      env:
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
        DB_NAME: test_db
        DB_USER: postgres
        DB_PASSWORD: postgres
        DB_HOST: localhost
        DB_PORT: 5432
        DEBUG: "True"
        ALLOWED_HOSTS: "*"
        CLOUD_NAME: ${{ secrets.CLOUD_NAME }}
        API_KEY: ${{ secrets.APL_KEY }}
        API_SECRET: ${{ secrets.API_SECRET }}
      run: |
        coverage run --source='.' manage.py test app.tests
        coverage run --append --source='.' manage.py test
        coverage xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
